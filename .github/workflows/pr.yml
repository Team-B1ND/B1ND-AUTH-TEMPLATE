name: Admin PR Control

on:
  pull_request:
    types: [opened, synchronize, reopened]
  issue_comment:
    types: [created]

permissions:
  pull-requests: write
  issues: write

jobs:
  admin-control:
    runs-on: ubuntu-latest

    steps:
      - name: Check Admin and Handle PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr_number = context.payload.issue ? context.payload.issue.number : context.payload.pull_request.number;
            const comment = context.payload.comment ? context.payload.comment.body.toLowerCase() : '';
            const adminUsers = ['your-admin-username1', 'your-admin-username2'];

            
            if (!adminUsers.includes(context.payload.sender.login)) {
              console.log('Unauthorized user. Action will not proceed.');
              return;
            }

            
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr_number,
            });

            
            const { data: reviews } = await github.rest.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr_number,
            });

            const approvals = reviews.filter(review => review.state === 'APPROVED');

            
            if (comment.includes('@admin close')) {
              await github.rest.pulls.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr_number,
                state: 'closed',
              });
              console.log(`PR #${pr_number} has been closed by ${context.payload.sender.login}`);
              return;
            }

            if (comment.includes('@admin merge')) {
              if (approvals.length < 2) {
                console.log('Merge failed: Not enough approvals (Requires at least 2 approvals).');
                return;
              }
              await github.rest.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr_number,
              });
              console.log(`PR #${pr_number} has been merged by ${context.payload.sender.login}`);
            }

            
            if (comment.includes('/delete')) {
              await github.rest.pulls.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr_number,
                state: 'closed',
              });
              console.log(`PR #${pr_number} has been closed by ${context.payload.sender.login} using /delete command`);
            }
